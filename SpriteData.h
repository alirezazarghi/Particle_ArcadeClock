#ifndef SpriteData_h
#define SpriteData_h
//Sprite data
const uint8_t ShapeData[] = 
{
  B8_1BIT(01100000),
  B8_1BIT(11110000),
  B8_1BIT(11110000),
  B8_1BIT(01100000),
};
const uint8_t BlinkyData[] = 
{
  // blinky
  B8_3BIT(00111100),
  B8_3BIT(01111110),
  B8_3BIT(12312311),
  B8_3BIT(13313311),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(01001001),
  // blinky 2
  B8_3BIT(00111100),
  B8_3BIT(01111110),
  B8_3BIT(12312311),
  B8_3BIT(13313311),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(10010010)

};
const uint8_t BlinkyMask[] = 
{
  // blinky
  B8_3BIT(00111100),
  B8_3BIT(01111110),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(01001001),
  // blinky 2
  B8_3BIT(00111100),
  B8_3BIT(01111110),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(11111111),
  B8_3BIT(10010010)

};
const struct CRGB BlinkyColTab[] =  { CRGB(255, 0,0),CRGB(0,0,255),CRGB(255,255,255)};

const uint8_t TreeData[] = 
{
  // tree one
  B8_3BIT(00010000),
  B8_3BIT(00121000),
  B8_3BIT(00111000),
  B8_3BIT(01314100),
  B8_3BIT(01111100),
  B8_3BIT(14131210),
  B8_3BIT(01111100),
  B8_3BIT(00050000),
  // tree two
  B8_3BIT(00010000),
  B8_3BIT(00131000),
  B8_3BIT(00111000),
  B8_3BIT(01412100),
  B8_3BIT(01111100),
  B8_3BIT(12141310),
  B8_3BIT(01111100),
  B8_3BIT(00050000),
  // tree three
  B8_3BIT(00010000),
  B8_3BIT(00141000),
  B8_3BIT(00111000),
  B8_3BIT(01213100),
  B8_3BIT(01111100),
  B8_3BIT(13121410),
  B8_3BIT(01111100),
  B8_3BIT(00050000)

};
const uint8_t TreeMask[] = 
{
  // tree one
  B8_1BIT(00010000),
  B8_1BIT(00111000),
  B8_1BIT(00111000),
  B8_1BIT(01111100),
  B8_1BIT(01111100),
  B8_1BIT(11111110),
  B8_1BIT(01111100),
  B8_1BIT(00010000),
  // tree two
  B8_1BIT(00010000),
  B8_1BIT(00111000),
  B8_1BIT(00111000),
  B8_1BIT(01111100),
  B8_1BIT(01111100),
  B8_1BIT(11111110),
  B8_1BIT(01111100),
  B8_1BIT(00010000),
  // tree three
  B8_1BIT(00010000),
  B8_1BIT(00111000),
  B8_1BIT(00111000),
  B8_1BIT(01111100),
  B8_1BIT(01111100),
  B8_1BIT(11111110),
  B8_1BIT(01111100),
  B8_1BIT(00010000)

};
const struct CRGB TreeColTab[] =  { CRGB(0, 255, 41),CRGB(0,120,255),CRGB(255,120,236),CRGB(255,0,90),CRGB(169,81,11)};

const uint8_t InvaderThreeData[] = 
{
  // invader bend
  B8_1BIT(00001111),B8_1BIT(00000000),
  B8_1BIT(01111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11110000),
  B8_1BIT(11100110),B8_1BIT(01110000),
  B8_1BIT(11111111),B8_1BIT(11110000),
  B8_1BIT(00111001),B8_1BIT(11000000),
  B8_1BIT(01100110),B8_1BIT(01100000),
  B8_1BIT(00110000),B8_1BIT(11000000),
  // invader open
  B8_1BIT(00001111),B8_1BIT(00000000),
  B8_1BIT(01111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11110000),
  B8_1BIT(11100110),B8_1BIT(01110000),
  B8_1BIT(11111111),B8_1BIT(11110000),
  B8_1BIT(00011001),B8_1BIT(10000000),
  B8_1BIT(00110110),B8_1BIT(11000000),
  B8_1BIT(11000000),B8_1BIT(00110000)
};
const uint8_t InvaderThreeMask[] = 
{
  // invader bend
  B8_1BIT(00001111),B8_1BIT(00000000),
  B8_1BIT(01111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11110000),
  B8_1BIT(11100110),B8_1BIT(01110000),
  B8_1BIT(11111111),B8_1BIT(11110000),
  B8_1BIT(00111001),B8_1BIT(11000000),
  B8_1BIT(01100110),B8_1BIT(01100000),
  B8_1BIT(00110000),B8_1BIT(11000000),
  // invader open
  B8_1BIT(00001111),B8_1BIT(00000000),
  B8_1BIT(01111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11110000),
  B8_1BIT(11100110),B8_1BIT(01110000),
  B8_1BIT(11111111),B8_1BIT(11110000),
  B8_1BIT(00011001),B8_1BIT(10000000),
  B8_1BIT(00110110),B8_1BIT(11000000),
  B8_1BIT(11000000),B8_1BIT(00110000)
};
const struct CRGB InvaderThreeColTab[] =  { CRGB(0, 128, 0) };

const uint8_t InvaderTwoData[] = 
{
  // invader bend
  B8_1BIT(00100000),B8_1BIT(10000000),
  B8_1BIT(00010001),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01101110),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(10111111),B8_1BIT(10100000),
  B8_1BIT(10100000),B8_1BIT(10100000),
  B8_1BIT(00011011),B8_1BIT(00000000),
  // invader open
  B8_1BIT(00100000),B8_1BIT(10000000),
  B8_1BIT(10010001),B8_1BIT(00100000),
  B8_1BIT(10111111),B8_1BIT(10100000),
  B8_1BIT(11101110),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00100000),B8_1BIT(10000000),
  B8_1BIT(01000000),B8_1BIT(01000000)
};
const uint8_t InvaderTwoMask[] = 
{
  // invader bend
  B8_1BIT(00100000),B8_1BIT(10000000),
  B8_1BIT(00010001),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01101110),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(10111111),B8_1BIT(10100000),
  B8_1BIT(10100000),B8_1BIT(10100000),
  B8_1BIT(00011011),B8_1BIT(00000000),
  // invader open
  B8_1BIT(00100000),B8_1BIT(10000000),
  B8_1BIT(10010001),B8_1BIT(00100000),
  B8_1BIT(10111111),B8_1BIT(10100000),
  B8_1BIT(11101110),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00100000),B8_1BIT(10000000),
  B8_1BIT(01000000),B8_1BIT(01000000)
};
const struct CRGB InvaderTwoColTab[] =  { CRGB(0, 0, 128) };
const uint8_t InvaderOneData[] = 
{
  // invader bend
  B8_1BIT(00011000),
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11011011),
  B8_1BIT(11111111),
  B8_1BIT(01011010),
  B8_1BIT(10000001),
  B8_1BIT(01000010),
  // invader open
  B8_1BIT(00011000),
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11011011),
  B8_1BIT(11111111),
  B8_1BIT(00100100),
  B8_1BIT(01011010),
  B8_1BIT(10100101)
};
const uint8_t InvaderOneMask[] = 
{
  // invader bend
  B8_1BIT(00011000),
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11011011),
  B8_1BIT(11111111),
  B8_1BIT(01011010),
  B8_1BIT(10000001),
  B8_1BIT(01000010),
  // invader open
  B8_1BIT(00011000),
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11011011),
  B8_1BIT(11111111),
  B8_1BIT(00100100),
  B8_1BIT(01011010),
  B8_1BIT(10100101)
};
const struct CRGB InvaderOneColTab[] =  { CRGB(128, 0, 0) };

const uint8_t PacmanLeftData[] = 
{
  // Pacman Open
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(00011111),
  B8_1BIT(00001111),
  B8_1BIT(00001111),
  B8_1BIT(00011111),
  B8_1BIT(01111110),
  B8_1BIT(00111100),
  // Pacman Half
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111111),
  B8_1BIT(00001111),
  B8_1BIT(00001111),
  B8_1BIT(11111111),
  B8_1BIT(01111110),
  B8_1BIT(00111100),
  // Pacman Closed
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(01111110),
  B8_1BIT(00111100)
};
const uint8_t PacmanLeftMask[] = 
{
  // Pacman Open
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(00011111),
  B8_1BIT(00001111),
  B8_1BIT(00001111),
  B8_1BIT(00011111),
  B8_1BIT(01111110),
  B8_1BIT(00111100),
  // Pacman Half
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111111),
  B8_1BIT(00001111),
  B8_1BIT(00001111),
  B8_1BIT(11111111),
  B8_1BIT(01111110),
  B8_1BIT(00111100),
  // Pacman Closed
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(01111110),
  B8_1BIT(00111100)
};
const struct CRGB PacmanLeftColTab[] =  { CRGB(255, 247, 0) };
const uint8_t PacmanRightData[] = 
{
  // Pacman Open
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111000),
  B8_1BIT(11110000),
  B8_1BIT(11110000),
  B8_1BIT(11111000),
  B8_1BIT(01111110),
  B8_1BIT(00111100),
  // Pacman Half
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111111),
  B8_1BIT(11110000),
  B8_1BIT(11110000),
  B8_1BIT(11111111),
  B8_1BIT(01111110),
  B8_1BIT(00111100),
  // Pacman Closed
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(01111110),
  B8_1BIT(00111100)
};
const uint8_t PacmanRightMask[] = 
{
  // Pacman Open
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111000),
  B8_1BIT(11110000),
  B8_1BIT(11110000),
  B8_1BIT(11111000),
  B8_1BIT(01111110),
  B8_1BIT(00111100),
  // Pacman Half
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111111),
  B8_1BIT(11110000),
  B8_1BIT(11110000),
  B8_1BIT(11111111),
  B8_1BIT(01111110),
  B8_1BIT(00111100),
  // Pacman Closed
  B8_1BIT(00111100),
  B8_1BIT(01111110),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(11111111),
  B8_1BIT(01111110),
  B8_1BIT(00111100)
};
const struct CRGB PacmanRightColTab[] =  { CRGB(255, 247, 0) };

struct CRGB ColTable[1] = { CRGB(64, 128, 255) };
#endif
